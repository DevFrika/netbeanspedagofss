<?php

namespace Pedagogie\PedagogieBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * EmploiRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmploiRepository extends EntityRepository
{
	public function findByDepartement($departement)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.departements', 'dep' ,'WITH', 'dep.id = \''.$departement->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findByFiliere($filiere)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.filieres', 'fil' ,'WITH', 'fil.id = \''.$filiere->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findByClasse($classes)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.classes', 'cls' ,'WITH', 'cls.id = \''.$classes->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findByGroupe($groupe)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.groupes', 'g' ,'WITH', 'g.id = \''.$groupe->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findByEnseignant($enseignant)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.enseignants', 'ens' ,'WITH', 'ens.id = \''.$enseignant->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findByNature($natures)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb ->join('emp.natures', 'nat' ,'WITH', 'nat.id = \''.$natures->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getResult();
	}
	
	public function findExist($salle,$jour,$heureDebut)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb->where('emp.heure_debut = :hdeb')->setParameter('hdeb', $heureDebut);
			$qb ->join('emp.salles', 'salle' ,'WITH', 'salle.id = \''.$salle->getId().'\'' ); // Puis on filtre sur le nom des catégories à l'aide d'un IN
			$qb ->join('emp.jours', 'jour' ,'WITH', 'jour.id = \''.$jour->getId().'\'' );
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getOneOrNullResult();
	}
	
	public function findExistEnseignant($jour,$heureDebut,$enseignant)
	{
			$qb = $this->createQueryBuilder('emp');
			$qb->where('emp.heure_debut = :hdeb')->setParameter('hdeb', $heureDebut);
			$qb ->join('emp.jours', 'jour' ,'WITH', 'jour.id = \''.$jour->getId().'\'' );
			$qb ->join('emp.jours', 'ens' ,'WITH', 'ens.id = \''.$enseignant->getId().'\'' );
			// Enfin, on retourne le résultat
			return $qb->getQuery()->getOneOrNullResult();
	}
}
